name: Library

on: [push, pull_request]

env:
  RUSTFLAGS: -C target-cpu=haswell

jobs:
  MSRV:
    name: Minimum supported Rust version
    runs-on: ubuntu-latest
    env:
      minrust: 1.46

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install toolchain ${{ env.minrust }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.minrust }}
          profile: minimal
          override: true

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v1

      - name: Output processor info
        run: cat /proc/cpuinfo

      - name: Check MSRV
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --workspace --all-features --all-targets

  build-docs:
    name: Build docs
    needs: MSRV
    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install nightly toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          override: true

      - name: Remove old matchers
        run: echo "::remove-matcher owner=rust::"

      - name: Add problem matchers
        run: echo "::add-matcher::.github/problemMatchers/rust.json"

      - name: Check docs
        uses: actions-rs/cargo@v1
        with:
          command: doc
          args: --workspace --no-deps --all-features

      - name: Cache docs
        uses: actions/cache@v2
        id: restore-docs
        with:
          path: ./target/doc/
          key: ${{ github.sha }}

  deploy_docs:
    name: Deploy docs
    runs-on: ubuntu-latest
    needs: build-docs
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Restore cached docs
        uses: actions/cache@v2
        id: restore-docs
        with:
          path: ./target/doc/
          key: ${{ github.sha }}

      - name: Remove examples
        run: $(grep -h '^name' **/examples/**/Cargo.toml | cut -d'"' -f2 | sed 's/-/_/g' | xargs -I '{}' rm -rf ./target/doc/{})

      - name: Prepare docs
        run: |
          echo '<meta http-equiv="refresh" content="0;url=starchart/index.html">' > target/doc/index.html
      - name: Deploy docs
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: target/doc
          allow_empty_commit: true
  
  audit:
    name: Security Audit
    needs: MSRV
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
      
      - name: Run security audit
        uses: actions-rs/audit-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    needs: MSRV
    # FIXME: remove once https://github.com/rust-lang/rust-clippy/issues/8020 is fixed
    if: ${{ !always() }}

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install nightly toolchain
        id: toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          components: clippy
          profile: minimal
          override: true

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v1

      - name: Run clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features --tests --workspace
  rustfmt:
    name: Format
    needs: MSRV
    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install nightly toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          components: rustfmt
          profile: minimal
          override: true

      - name: Remove old matchers
        run: echo "::remove-matcher owner=rust::"

      - name: Add problem matchers
        run: echo "::add-matcher::.github/problemMatchers/rust.json"

      - name: Run cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  codespell:
    name: Spelling
    needs: MSRV
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Run Codespell
        uses: codespell-project/actions-codespell@master

  test:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: MSRV

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install nightly toolchain
        id: toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          override: true

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v1

      - name: Remove old matchers
        run: echo "::remove-matcher owner=rust::"

      - name: Add problem matchers
        run: echo "::add-matcher::.github/problemMatchers/rust.json"
      
      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all-features -- --test-threads 1

  coverage:
    name: Coverage
    runs-on: ubuntu-latest
    needs: test

    container:
        image: xd009642/tarpaulin:develop-nightly
        options: --security-opt seccomp=unconfined

    steps: 
      - name: Checkout sources
        uses: actions/checkout@v2
      
      - name: Collect coverage
        uses: actions-rs/cargo@v1
        with:
          command: tarpaulin
          args: -- --test-threads 1

      - name: Upload to codecov.io
        uses: codecov/codecov-action@v2
      
      - name: Archive code coverage
        uses: actions/upload-artifact@v2
        with:
          name: code-coverage-report
          path: tarpaulin-report.html

  miri:
    name: Miri UB tests
    runs-on: ubuntu-latest
    needs: MSRV
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
      
      - name: Set dynamic values
        id: values
        run: |
          echo "::set-output name=miri-version::nightly-$(curl -s https://rust-lang.github.io/rustup-components-history/x86_64-unknown-linux-gnu/miri)"
          echo "::set-output name=excluded-examples::$(grep -h '^name' examples/*/Cargo.toml | cut -d \" -f2 | xargs -I '{}' printf '--exclude {} ')"
      - name: Install ${{ steps.values.outputs.miri-version }} toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ steps.values.outputs.miri-version }}
          override: true
          components: miri, rust-src

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v1
      
      - name: Install xargo
        uses: baptiste0928/cargo-install@v1
        with:
          crate: xargo

      - name: Run cargo clean
        uses: actions-rs/cargo@v1
        with:
          command: clean

      - name: Run Miri UB check
        uses: actions-rs/cargo@v1
        with:
          command: miri
          args: test --workspace --all-features ${{ steps.values.outputs.excluded-examples }} --tests
        env:
          MIRIFLAGS: "-Zmiri-disable-isolation"